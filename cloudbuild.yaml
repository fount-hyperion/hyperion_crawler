# Cloud Build 설정 파일
# 이 파일은 GitHub과 연동되어 자동 빌드/배포를 수행합니다.

substitutions:
  _SERVICE_NAME: hyperion-crawler
  _REGION: asia-northeast3
  _SERVICE_ACCOUNT: github-actions-dev@${PROJECT_ID}.iam.gserviceaccount.com

steps:
  # 1. 이전 이미지 가져오기 (캐시용)
  - name: 'gcr.io/cloud-builders/docker'
    id: 'pull-cache'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        docker pull ${_REGION}-docker.pkg.dev/$PROJECT_ID/hyperion-containers-dev/${_SERVICE_NAME}-${BRANCH_NAME}:latest || true

  # 2. GitHub Token 가져오기 (한 번만)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'get-github-token'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Retrieving GitHub token..."
        gcloud secrets versions access latest --secret="hyperion-github-token" > /workspace/github_token.txt

  # 3. Python 테스트 (간단하게)
  - name: 'python:3.13-slim'
    id: 'test'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # 필요한 도구 설치
        apt-get update && apt-get install -y git
        pip install --upgrade pip
        
        # workspace에서 GitHub 토큰 읽기
        GH_PAT=$(cat /workspace/github_token.txt)
        git config --global url."https://$${GH_PAT}@github.com/".insteadOf "https://github.com/"
        
        cd api
        # 기본 syntax 검사만
        python -m py_compile src/**/*.py || true
        cd ..

  # 4. Docker 이미지 빌드
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # workspace에서 GitHub 토큰 읽기
        GH_PAT=$(cat /workspace/github_token.txt)
        
        # Docker 빌드 실행 (build-arg로 GitHub 토큰 전달)
        docker build \
          --cache-from ${_REGION}-docker.pkg.dev/$PROJECT_ID/hyperion-containers-dev/${_SERVICE_NAME}-${BRANCH_NAME}:latest \
          --cache-from type=inline \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          --build-arg GH_TOKEN="$${GH_PAT}" \
          -t ${_REGION}-docker.pkg.dev/$PROJECT_ID/hyperion-containers-dev/${_SERVICE_NAME}-${BRANCH_NAME}:${COMMIT_SHA} \
          -t ${_REGION}-docker.pkg.dev/$PROJECT_ID/hyperion-containers-dev/${_SERVICE_NAME}-${BRANCH_NAME}:latest \
          . || { touch /workspace/.build_failed; exit 1; }

  # 5. Artifact Registry에 푸시
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push'
    args:
      - 'push'
      - '--all-tags'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/hyperion-containers-dev/${_SERVICE_NAME}-${BRANCH_NAME}'

  # 6. Cloud Run에 배포
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # 배포 실행
        gcloud run deploy ${_SERVICE_NAME}-${BRANCH_NAME} \
          --image ${_REGION}-docker.pkg.dev/$PROJECT_ID/hyperion-containers-dev/${_SERVICE_NAME}-${BRANCH_NAME}:${COMMIT_SHA} \
          --region ${_REGION} \
          --platform managed \
          --allow-unauthenticated \
          --memory 1Gi \
          --cpu 1 \
          --timeout 300 \
          --max-instances 10 \
          --min-instances 0 \
          --port 8080 \
          --service-account ${_SERVICE_ACCOUNT} \
          --set-env-vars ENVIRONMENT=${BRANCH_NAME},GOOGLE_CLOUD_PROJECT=${PROJECT_ID} \
          --no-use-http2
        
        # 배포 실패 시 플래그 생성
        if [ $? -ne 0 ]; then
          echo "Deployment failed"
          touch /workspace/.build_failed
          exit 1
        fi


# 빌드 로그 설정
options:
  logging: CLOUD_LOGGING_ONLY

# 빌드 시간 제한
timeout: '1200s'  # 20분

