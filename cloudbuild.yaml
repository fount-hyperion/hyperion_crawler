# Cloud Build 설정 파일
# 이 파일은 GitHub과 연동되어 자동 빌드/배포를 수행합니다.

substitutions:
  _SERVICE_NAME: hyperion-crawler
  _REGION: asia-northeast3
  _SERVICE_ACCOUNT: github-actions-dev@${PROJECT_ID}.iam.gserviceaccount.com

steps:
  # 1. 이전 이미지 가져오기 (캐시용)
  - name: 'gcr.io/cloud-builders/docker'
    id: 'pull-cache'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        docker pull gcr.io/$PROJECT_ID/${_SERVICE_NAME}-${BRANCH_NAME}:latest || true

  # 2. Python 의존성 설치 및 테스트
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: 'test'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Python 3.13 설치
        apt-get update && apt-get install -y python3.13 python3.13-venv python3-pip
        python3.13 -m pip install --upgrade pip
        
        cd api
        # Private repository 인증 설정
        TOKEN=$(gcloud auth application-default print-access-token)
        
        # pip 설정에 인증 토큰 추가
        python3.13 -m pip config set global.index-url https://oauth2accesstoken:$${TOKEN}@asia-northeast3-python.pkg.dev/shared-hyperion/hyperion-virtual/simple/
        python3.13 -m pip config set global.extra-index-url https://pypi.org/simple/
        
        # 패키지 설치
        python3.13 -m pip install kardia
        python3.13 -m pip install -r requirements.txt
        python3.13 -m pip install -r requirements-dev.txt
        cd ..
        python3.13 -m pytest tests/unit -v --tb=short || true  # 테스트 실패해도 계속 진행 (초기 단계)

  # 3. Access Token 생성 (Artifact Registry 인증을 위해)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'create-access-token'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # 현재 서비스 계정 확인
        SERVICE_ACCOUNT=$(gcloud config get-value account)
        echo "Using service account: $${SERVICE_ACCOUNT}"
        
        # 프로젝트 확인
        echo "Current project: $(gcloud config get-value project)"
        
        # 서비스 계정의 이메일 확인
        gcloud auth list --filter=status:ACTIVE --format="value(account)"
        
        # Access token 생성
        gcloud auth print-access-token > /workspace/access_token.txt || { touch /workspace/.build_failed; exit 1; }
        
        # 토큰 확인 및 길이 출력
        if [ -s /workspace/access_token.txt ]; then
          TOKEN_LENGTH=$(wc -c < /workspace/access_token.txt)
          echo "Access token successfully generated (length: $${TOKEN_LENGTH})"
        else
          echo "Failed to generate access token"
          touch /workspace/.build_failed
          exit 1
        fi

  # 4. Docker 이미지 빌드
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # workspace에서 토큰 읽기
        ACCESS_TOKEN=$(cat /workspace/access_token.txt)
        
        # Docker 빌드 실행 (build-arg로 토큰 전달)
        docker build \
          --cache-from ${_REGION}-docker.pkg.dev/$PROJECT_ID/hyperion-containers-dev/${_SERVICE_NAME}-${BRANCH_NAME}:latest \
          --build-arg ACCESS_TOKEN="$${ACCESS_TOKEN}" \
          -t ${_REGION}-docker.pkg.dev/$PROJECT_ID/hyperion-containers-dev/${_SERVICE_NAME}-${BRANCH_NAME}:${COMMIT_SHA} \
          -t ${_REGION}-docker.pkg.dev/$PROJECT_ID/hyperion-containers-dev/${_SERVICE_NAME}-${BRANCH_NAME}:latest \
          . || { touch /workspace/.build_failed; exit 1; }

  # 5. Artifact Registry에 푸시
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push'
    args:
      - 'push'
      - '--all-tags'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/hyperion-containers-dev/${_SERVICE_NAME}-${BRANCH_NAME}'

  # 6. Cloud Run에 배포
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # 배포 실행
        gcloud run deploy ${_SERVICE_NAME}-${BRANCH_NAME} \
          --image ${_REGION}-docker.pkg.dev/$PROJECT_ID/hyperion-containers-dev/${_SERVICE_NAME}-${BRANCH_NAME}:${COMMIT_SHA} \
          --region ${_REGION} \
          --platform managed \
          --allow-unauthenticated \
          --memory 512Mi \
          --cpu 1 \
          --timeout 300 \
          --max-instances 10 \
          --min-instances 0 \
          --port 8080 \
          --service-account ${_SERVICE_ACCOUNT} \
          --set-env-vars ENVIRONMENT=${BRANCH_NAME},GOOGLE_CLOUD_PROJECT=${PROJECT_ID} \
          --no-use-http2
        
        # 배포 실패 시 플래그 생성
        if [ $? -ne 0 ]; then
          echo "Deployment failed"
          touch /workspace/.build_failed
          exit 1
        fi


# 빌드 로그 설정
options:
  logging: CLOUD_LOGGING_ONLY

# 빌드 시간 제한
timeout: '1200s'  # 20분

