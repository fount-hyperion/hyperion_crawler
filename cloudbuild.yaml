# Cloud Build 설정 파일
# 이 파일은 GitHub과 연동되어 자동 빌드/배포를 수행합니다.

substitutions:
  _SERVICE_NAME: hyperion-crawler
  _REGION: asia-northeast3
  _SERVICE_ACCOUNT: github-actions-dev@${PROJECT_ID}.iam.gserviceaccount.com

steps:
  # 1. 이전 이미지 가져오기 (캐시용)
  - name: 'gcr.io/cloud-builders/docker'
    id: 'pull-cache'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        docker pull gcr.io/$PROJECT_ID/${_SERVICE_NAME}-${BRANCH_NAME}:latest || true

  # 2. Python 의존성 설치 및 테스트
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: 'test'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Python 3.13 설치
        apt-get update && apt-get install -y python3.13 python3.13-venv python3-pip
        python3.13 -m pip install --upgrade pip
        
        cd api
        # Private repository 인증 설정
        TOKEN=$(gcloud auth application-default print-access-token)
        
        # pip 설정에 인증 토큰 추가
        python3.13 -m pip config set global.index-url https://oauth2accesstoken:$${TOKEN}@asia-northeast3-python.pkg.dev/shared-hyperion/hyperion-virtual/simple/
        python3.13 -m pip config set global.extra-index-url https://pypi.org/simple/
        
        # 패키지 설치
        python3.13 -m pip install kardia
        python3.13 -m pip install -r requirements.txt
        python3.13 -m pip install -r requirements-dev.txt
        cd ..
        python3.13 -m pytest tests/unit -v --tb=short || true  # 테스트 실패해도 계속 진행 (초기 단계)

  # 3. Access Token 생성 (Artifact Registry 인증을 위해)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'create-access-token'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # 현재 서비스 계정 확인
        SERVICE_ACCOUNT=$(gcloud config get-value account)
        echo "Using service account: $${SERVICE_ACCOUNT}"
        
        # 프로젝트 확인
        echo "Current project: $(gcloud config get-value project)"
        
        # 서비스 계정의 이메일 확인
        gcloud auth list --filter=status:ACTIVE --format="value(account)"
        
        # Access token 생성
        gcloud auth print-access-token > /workspace/access_token.txt
        
        # 토큰 확인 및 길이 출력
        if [ -s /workspace/access_token.txt ]; then
          TOKEN_LENGTH=$(wc -c < /workspace/access_token.txt)
          echo "Access token successfully generated (length: $${TOKEN_LENGTH})"
        else
          echo "Failed to generate access token"
          exit 1
        fi

  # 4. Docker 이미지 빌드
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # workspace에서 토큰 읽기
        ACCESS_TOKEN=$(cat /workspace/access_token.txt)
        
        # Docker 빌드 실행 (build-arg로 토큰 전달)
        docker build \
          --cache-from ${_REGION}-docker.pkg.dev/$PROJECT_ID/hyperion-backend-dev/${_SERVICE_NAME}-${BRANCH_NAME}:latest \
          --build-arg ACCESS_TOKEN="$${ACCESS_TOKEN}" \
          -t ${_REGION}-docker.pkg.dev/$PROJECT_ID/hyperion-backend-dev/${_SERVICE_NAME}-${BRANCH_NAME}:${COMMIT_SHA} \
          -t ${_REGION}-docker.pkg.dev/$PROJECT_ID/hyperion-backend-dev/${_SERVICE_NAME}-${BRANCH_NAME}:latest \
          .

  # 5. Artifact Registry에 푸시
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push'
    args:
      - 'push'
      - '--all-tags'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/hyperion-backend-dev/${_SERVICE_NAME}-${BRANCH_NAME}'

  # 6. Cloud Run에 배포
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy'
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}-${BRANCH_NAME}'
      - '--image'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/hyperion-backend-dev/${_SERVICE_NAME}-${BRANCH_NAME}:${COMMIT_SHA}'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--memory'
      - '512Mi'
      - '--cpu'
      - '1'
      - '--timeout'
      - '300'
      - '--max-instances'
      - '10'
      - '--min-instances'
      - '0'
      - '--port'
      - '8080'
      - '--service-account'
      - '${_SERVICE_ACCOUNT}'
      - '--set-env-vars'
      - 'ENVIRONMENT=${BRANCH_NAME},GOOGLE_CLOUD_PROJECT=${PROJECT_ID}'
      - '--no-use-http2'

  # 7. 빌드 성공 알림
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'notify-success'
    entrypoint: 'bash'
    secretEnv: ['TEAMS_WEBHOOK_URL']
    args:
      - '-c'
      - |
        if [ ! -z "$${TEAMS_WEBHOOK_URL}" ]; then
          SERVICE_URL=$(gcloud run services describe ${_SERVICE_NAME}-${BRANCH_NAME} \
            --region ${_REGION} \
            --format 'value(status.url)')
          
          # Teams 메시지 카드 형식
          curl -X POST $${TEAMS_WEBHOOK_URL} \
            -H 'Content-Type: application/json' \
            -d '{
              "@type": "MessageCard",
              "@context": "https://schema.org/extensions",
              "themeColor": "00FF00",
              "summary": "Hyperion Crawler 배포 성공",
              "sections": [{
                "activityTitle": "✅ Hyperion Crawler 배포 성공",
                "facts": [
                  {
                    "name": "환경",
                    "value": "'"${BRANCH_NAME}"'"
                  },
                  {
                    "name": "커밋",
                    "value": "'"${SHORT_SHA}"'"
                  },
                  {
                    "name": "프로젝트",
                    "value": "'"${PROJECT_ID}"'"
                  },
                  {
                    "name": "서비스 URL",
                    "value": "'"$${SERVICE_URL}"'"
                  }
                ],
                "markdown": true
              }],
              "potentialAction": [{
                "@type": "OpenUri",
                "name": "빌드 로그 보기",
                "targets": [{
                  "os": "default",
                  "uri": "https://console.cloud.google.com/cloud-build/builds/'"${BUILD_ID}"'?project='"${PROJECT_ID}"'"
                }]
              }]
            }' || true
        fi

# 빌드 실패 시 알림
  # Cloud Build의 마지막 단계로 실행되며, 이전 단계가 실패해도 항상 실행됨
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'notify-failure'
    entrypoint: 'bash'
    secretEnv: ['TEAMS_WEBHOOK_URL']
    # waitFor: ['-'] 설정으로 이전 단계의 성공/실패와 관계없이 실행
    waitFor: ['-']
    args:
      - '-c'
      - |
        # 빌드 상태 확인 (이전 단계 중 하나라도 실패했는지)
        BUILD_STATUS="SUCCESS"
        
        # gcloud builds describe로 현재 빌드 상태 확인
        CURRENT_STATUS=$(gcloud builds describe ${BUILD_ID} --format="value(status)" 2>/dev/null || echo "UNKNOWN")
        
        if [ "$${CURRENT_STATUS}" != "SUCCESS" ] && [ "$${CURRENT_STATUS}" != "WORKING" ]; then
          BUILD_STATUS="FAILURE"
        fi
        
        # 실패한 경우에만 알림 전송
        if [ "$${BUILD_STATUS}" == "FAILURE" ] && [ ! -z "$${TEAMS_WEBHOOK_URL}" ]; then
          curl -X POST $${TEAMS_WEBHOOK_URL} \
            -H 'Content-Type: application/json' \
            -d '{
              "@type": "MessageCard",
              "@context": "https://schema.org/extensions",
              "themeColor": "FF0000",
              "summary": "Hyperion Crawler 빌드 실패",
              "sections": [{
                "activityTitle": "❌ Hyperion Crawler 빌드 실패",
                "facts": [
                  {
                    "name": "환경",
                    "value": "'"${BRANCH_NAME}"'"
                  },
                  {
                    "name": "커밋",
                    "value": "'"${SHORT_SHA}"'"
                  },
                  {
                    "name": "프로젝트",
                    "value": "'"${PROJECT_ID}"'"
                  },
                  {
                    "name": "빌드 ID",
                    "value": "'"${BUILD_ID}"'"
                  }
                ],
                "markdown": true
              }],
              "potentialAction": [{
                "@type": "OpenUri",
                "name": "빌드 로그 보기",
                "targets": [{
                  "os": "default",
                  "uri": "https://console.cloud.google.com/cloud-build/builds/'"${BUILD_ID}"'?project='"${PROJECT_ID}"'"
                }]
              }]
            }' || true
        fi

# 빌드 로그 설정
options:
  logging: CLOUD_LOGGING_ONLY

# 빌드 시간 제한
timeout: '1200s'  # 20분

# 빌드 알림 (Pub/Sub 토픽으로 전송)
# Cloud Build 설정에서 알림을 구성해야 합니다
availableSecrets:
  secretManager:
  - versionName: projects/${PROJECT_ID}/secrets/teams-webhook-build-url/versions/latest
    env: 'TEAMS_WEBHOOK_URL'